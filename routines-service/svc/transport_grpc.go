// Code generated by truss.
// Rerunning truss will overwrite this file.
// DO NOT EDIT!

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"net/http"

	"golang.org/x/net/context"
	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/zaquestion/routines"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC RoutinesServer.
func MakeGRPCServer(ctx context.Context, endpoints Endpoints) pb.RoutinesServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	return &grpcServer{
		// routines

		scraptrelloreset: grpctransport.NewServer(
			ctx,
			endpoints.ScrapTrelloResetEndpoint,
			DecodeGRPCScrapTrelloResetRequest,
			EncodeGRPCScrapTrelloResetResponse,
			serverOptions...,
		),
		getroutines: grpctransport.NewServer(
			ctx,
			endpoints.GetRoutinesEndpoint,
			DecodeGRPCGetRoutinesRequest,
			EncodeGRPCGetRoutinesResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the RoutinesServer interface
type grpcServer struct {
	scraptrelloreset grpctransport.Handler
	getroutines      grpctransport.Handler
}

// Methods for grpcServer to implement RoutinesServer interface

func (s *grpcServer) ScrapTrelloReset(ctx context.Context, req *pb.ScrapTrelloResetRequest) (*pb.ScrapTrelloResetReply, error) {
	_, rep, err := s.scraptrelloreset.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ScrapTrelloResetReply), nil
}

func (s *grpcServer) GetRoutines(ctx context.Context, req *pb.GetRoutinesRequest) (*pb.GetRoutinesReply, error) {
	_, rep, err := s.getroutines.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetRoutinesReply), nil
}

// Server Decode

// DecodeGRPCScrapTrelloResetRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC scraptrelloreset request to a user-domain scraptrelloreset request. Primarily useful in a server.
func DecodeGRPCScrapTrelloResetRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ScrapTrelloResetRequest)
	return req, nil
}

// DecodeGRPCGetRoutinesRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getroutines request to a user-domain getroutines request. Primarily useful in a server.
func DecodeGRPCGetRoutinesRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetRoutinesRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCScrapTrelloResetResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain scraptrelloreset response to a gRPC scraptrelloreset reply. Primarily useful in a server.
func EncodeGRPCScrapTrelloResetResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ScrapTrelloResetReply)
	return resp, nil
}

// EncodeGRPCGetRoutinesResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getroutines response to a gRPC getroutines reply. Primarily useful in a server.
func EncodeGRPCGetRoutinesResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetRoutinesReply)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md *metadata.MD) context.Context {
	for k, v := range *md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
